cmake_minimum_required(VERSION 3.24)
project(DogShelterApp)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

set(CMAKE_PREFIX_PATH "C:\\Qt\\6.5.2\\mingw_64\\lib\\cmake")

find_package(Qt6 COMPONENTS
        Core
        Gui
        Widgets
        REQUIRED)

add_executable(DogShelterApp main.cpp Domain/Dog.h Domain/Dog.cpp Exceptions/RepositoryException.h Exceptions/RepositoryException.cpp Validation/DogValidator.h Exceptions/ValidationException.h Exceptions/ValidationException.cpp Validation/DogValidator.cpp Repository/Repository.h Repository/Repository.cpp Repository/FileRepository.h Repository/FileRepository.cpp Repository/CSVRepository.h Repository/CSVRepository.cpp Repository/HTMLRepository.h Repository/HTMLRepository.cpp Service/AdministratorService.h Service/AdministratorService.cpp Service/UndoRedo.h Exceptions/ServiceException.h Exceptions/ServiceException.cpp Service/UserService.h Service/UserService.cpp Presentation/TableModel.h Tests/Tests.h Tests/TestDomain.h Tests/TestDomain.cpp Tests/Tests.cpp Tests/TestValidation.h Tests/TestValidation.cpp Tests/TestRepository.h Tests/TestRepository.cpp Tests/TestService.h Tests/TestService.cpp Presentation/TableModel.cpp Presentation/PictureDelegate.h Presentation/PictureDelegate.cpp Presentation/GUI.h Presentation/GUI.cpp)
target_link_libraries(DogShelterApp
        Qt::Core
        Qt::Gui
        Qt::Widgets
        )

if (WIN32)
    set(DEBUG_SUFFIX)
    if (MSVC AND CMAKE_BUILD_TYPE MATCHES "Debug")
        set(DEBUG_SUFFIX "d")
    endif ()
    set(QT_INSTALL_PATH "${CMAKE_PREFIX_PATH}")
    if (NOT EXISTS "${QT_INSTALL_PATH}/bin")
        set(QT_INSTALL_PATH "${QT_INSTALL_PATH}/..")
        if (NOT EXISTS "${QT_INSTALL_PATH}/bin")
            set(QT_INSTALL_PATH "${QT_INSTALL_PATH}/..")
        endif ()
    endif ()
    if (EXISTS "${QT_INSTALL_PATH}/plugins/platforms/qwindows${DEBUG_SUFFIX}.dll")
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E make_directory
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>/plugins/platforms/")
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy
                "${QT_INSTALL_PATH}/plugins/platforms/qwindows${DEBUG_SUFFIX}.dll"
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>/plugins/platforms/")
    endif ()
    foreach (QT_LIB Core Gui Widgets)
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy
                "${QT_INSTALL_PATH}/bin/Qt6${QT_LIB}${DEBUG_SUFFIX}.dll"
                "$<TARGET_FILE_DIR:${PROJECT_NAME}>")
    endforeach (QT_LIB)
endif ()
